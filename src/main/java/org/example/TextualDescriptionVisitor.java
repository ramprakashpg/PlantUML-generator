package org.example;

import padl.kernel.*;
import util.io.ProxyConsole;

import java.util.Iterator;

/**
 * This class represents a Visitor implementation for generating a textual description of a PADL model.
 * The description includes PADL kernel entities such as IFirstClassEntity and IRelationship.
 * The output conforms to the syntax and semantics of PlantUML class diagrams.
 */
public class TextualDescriptionVisitor implements PADLVisitor {
    /**
     * Get the PlantUML description generated by the visitor.
     *
     * @return The PlantUML description as a StringBuilder.
     */

    public StringBuilder getPlantUMLDescription() {
        return plantUMLDescription;
    }

    /**
     * StringBuilder object to store the PlantUML description.
     */
    private final StringBuilder plantUMLDescription = new StringBuilder("@startuml plantuml\n");
    /**
     * StringBuilder object to store relationships between entities.
     */
    private final StringBuilder relationships = new StringBuilder("\n");

    /**
     * Visits the IFirstClassEntity and generates PlantUML class representation.
     *
     * @param entity The entity to visit.
     */
    @Override
    public void visit(IFirstClassEntity entity) {
        plantUMLDescription.append("class ").append(entity.getName()).append(" {\n");
        plantUMLDescription.append("}\n");
    }

    @Override
    public void visit(IRelationship relationship) {
        String target = relationship.getTargetEntity().getDisplayName();
        String relationType = relationship.getClass().getSimpleName().replace("I", "");
        plantUMLDescription.append(relationType).append(" ");
        plantUMLDescription.append(target).append("\n");

    }

    @Override
    public void visit(IEntity entity) {

    }

    @Override
    public String generateDescription() {
        return String.valueOf(plantUMLDescription);
    }

    @Override
    public void close(final IAbstractModel anAbstractModel) {
        String.valueOf(plantUMLDescription.append(relationships).append("\n@enduml\n"));

    }

    @Override
    public void close(final IClass aClass) {

        this.printTopEntityClose(aClass);
    }

    @Override
    public void close(final IConstructor aConstructor) {

    }

    @Override
    public void close(final IDelegatingMethod aDelegatingMethod) {

    }

    @Override
    public void close(final IGetter aGetter) {
    }

    @Override
    public void close(final IGhost aGhost) {
        this.printTopEntityClose(aGhost);
    }

    @Override
    public void close(final IInterface anInterface) {

        this.printTopEntityClose(anInterface);
    }

    @Override
    public void close(final IMemberClass aMemberClass) {


    }

    @Override
    public void close(final IMemberGhost aMemberGhost) {

    }

    @Override
    public void close(final IMemberInterface aMemberInterface) {


    }

    @Override
    public void close(final IMethod aMethod) {
    }

    @Override
    public void close(final IPackage aPackage) {
        plantUMLDescription.append("\n");
        plantUMLDescription.append("}\n");
    }

    @Override
    public void close(final IPackageDefault aPackage) {
        plantUMLDescription.append("\n");
        plantUMLDescription.append("}\n");
    }

    @Override
    public void close(final ISetter aSetter) {
    }

    @Override
    public String getName() {
        return null;
    }

    @Override
    public void open(final IAbstractModel anAbstractModel) {


    }

    @Override
    public void open(final IClass aClass) {

        this.printTopClassOpen(aClass);

    }

    /**
     * Opens the visitor for the given class, appending necessary opening statements to the PlantUML description.
     * This method is called when visiting a class entity during the traversal of the PADL model.
     * It adds the class declaration to the PlantUML description, including modifiers such as 'abstract' if applicable,
     * and starts the class block with '{'.
     * Additionally, it iterates over the inherited entities and implemented interfaces of the class,
     * adding relationship information to the StringBuilder 'relationships'.
     *
     * @param aClass The class being opened.
     */
    private void printTopClassOpen(IClass aClass) {
        plantUMLDescription.append("\n");
        plantUMLDescription.append("\n");
        if (aClass.isForceAbstract()) {
            plantUMLDescription.append("abstract ");
        }
        plantUMLDescription.append("class " + aClass.getClass().getName() + " {");
        plantUMLDescription.append("\n");
        Iterator<?> iter;
        relationships.append("\n");
        iter = aClass.getIteratorOnInheritedEntities();
        while (iter.hasNext()) {
            IFirstClassEntity firstClassEntity = (IFirstClassEntity) iter.next();
            if (String.valueOf(aClass.getName()).equals("Object")) {
                continue;
            }
            relationships.append("\n");
            relationships.append(aClass.getName());
            relationships.append(" --^ ");
            relationships.append(firstClassEntity.getName());
            if (iter.hasNext()) {
                relationships.append("\n");
            }
        }
        iter = aClass.getIteratorOnImplementedInterfaces();
        if (iter.hasNext()) {
            while (iter.hasNext()) {
                relationships.append("\n");
                this.relationships.append(aClass.getName());
                this.relationships.append(" ..^ ");
                this.relationships.append(((IFirstClassEntity) (iter.next())).getName());
                if (iter.hasNext()) {
                    relationships.append("\n");
                }
            }
        }
    }

    @Override
    public void open(final IConstructor aConstructor) {
    }

    @Override
    public void open(final IDelegatingMethod aDelegatingMethod) {

    }

    @Override
    public void open(final IGetter aGetter) {
    }

    @Override
    public void open(final IGhost aGhost) {
        plantUMLDescription.append("\n");
        plantUMLDescription.append("\t\t\t");
        plantUMLDescription.append("class ").append(String.valueOf(aGhost.getName())).append(" {");
        plantUMLDescription.append("\n");


    }

    @Override
    public void open(final IInterface anInterface) {

        this.printTopEntityOpen(anInterface);

    }

    @Override
    public void open(final IMemberClass aMemberClass) {


    }

    @Override
    public void open(final IMemberGhost aMemberGhost) {


    }

    @Override
    public void open(final IMemberInterface aMemberInterface) {


    }

    @Override
    public void open(final IMethod aMethod) {
    }

    @Override
    public void open(final IPackage aPackage) {
        plantUMLDescription.append("package ").append(aPackage.getDisplayName()).append("{ \n");

    }

    @Override
    public void open(final IPackageDefault aPackage) {
        plantUMLDescription.append("package ").append(aPackage.getDisplayName()).append("{ \n");
    }

    @Override
    public void open(final ISetter aSetter) {

    }

    /**
     * Closes the visitor for the given entity, appending necessary closing statements to the PlantUML description.
     *
     * @param entity The entity being closed.
     */
    void printTopEntityClose(final IFirstClassEntity entity) {
        plantUMLDescription.append("\n");
        plantUMLDescription.append("}\n");
    }

    /**
     * Opens the visitor for the given entity, appending necessary opening statements to the PlantUML description.
     *
     * @param entity The entity being opened.
     */
    void printTopEntityOpen(final IFirstClassEntity entity) {
        this.plantUMLDescription.append("\n");
        this.plantUMLDescription.append("\n");
        plantUMLDescription.append("interface ").append(entity.getName()).append("{");
        Iterator<?> iter = entity.getIteratorOnConstituents();

        plantUMLDescription.append("\n");
        while (iter.hasNext()) {
            final IConstituent superEntity =
                    (IConstituent) iter.next();

            System.out.println(superEntity);
        }
        addRelationship(entity);
    }

    /**
     * Adds relationship information between the given entity and its inherited entities to the PlantUML description.
     *
     * @param entity The entity for which relationships are added.
     */
    private void addRelationship(IFirstClassEntity entity) {
        Iterator<?> iter;
        relationships.append("\n");
        iter = entity.getIteratorOnInheritedEntities();
        while (iter.hasNext()) {
            IFirstClassEntity firstClassEntity = (IFirstClassEntity) iter.next();

            relationships.append("\n");
            relationships.append(firstClassEntity.getName());
            relationships.append(" --^ ");
            relationships.append(entity.getName());
            if (iter.hasNext()) {
                relationships.append("\n");
            }
        }
    }

    @Override
    public void reset() {
    }

    @Override
    public final void unknownConstituentHandler(
            final String aCalledMethodName,
            final IConstituent aConstituent) {

        ProxyConsole
                .getInstance()
                .debugOutput()
                .print(this.getClass().getName());
        ProxyConsole
                .getInstance()
                .debugOutput()
                .print(" does not know what to do for \"");
        ProxyConsole.getInstance().debugOutput().print(aCalledMethodName);
        ProxyConsole.getInstance().debugOutput().print("\" (");
        ProxyConsole
                .getInstance()
                .debugOutput()
                .print(aConstituent.getDisplayID());
        ProxyConsole.getInstance().debugOutput().println(')');
    }

    @Override
    public void visit(final IAggregation anAggregation) {

    }

    @Override
    public void visit(final IAssociation anAssociation) {

    }

    @Override
    public void visit(final IComposition aComposition) {

    }

    @Override
    public void visit(final IContainerAggregation aContainerAggregation) {

    }

    @Override
    public void visit(final IContainerComposition aContainerComposition) {

    }

    @Override
    public void visit(final ICreation aCreation) {
    }

    @Override
    public void visit(final IField aField) {
    }

    @Override
    public void visit(final IMethodInvocation aMethodInvocation) {
    }

    @Override
    public void visit(final IParameter aParameter) {

    }

    @Override
    public void visit(final IPrimitiveEntity aPrimitiveEntity) {
        plantUMLDescription.append("class ").append(aPrimitiveEntity.getName()).append(" {\n");
    }

    @Override
    public void visit(final IUseRelationship aUse) {

    }
}

